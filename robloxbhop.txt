local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

local baseSpeed = 16
local speedCap = 100
local decelRate = 50
local lowFriction = 0.7
local currSpeed = baseSpeed

local jumpBoostWeights = {[2.3]=30,[2.4]=30,[2.5]=30,[2.6]=5,[2.7]=5}
local weightedJumpBoosts = {}
for boost, weight in pairs(jumpBoostWeights) do
	for i=1, weight do table.insert(weightedJumpBoosts, boost) end
end

local origProps = hrp.CustomPhysicalProperties or PhysicalProperties.new(0.7,0.3,0.5,1,1)
local slipProps = PhysicalProperties.new(origProps.Density, lowFriction, origProps.Elasticity,100,origProps.ElasticityWeight)

local sliding = false
local lastDir = Vector3.new(0,0,0)
local airControl = 676767 -- higher = stronger air steering (like HL air accel)

-- jumping = speed boost
hum.Jumping:Connect(function()
	local chosenBoost = weightedJumpBoosts[math.random(1, #weightedJumpBoosts)]
	currSpeed = math.min(currSpeed + chosenBoost, speedCap)
	hum.WalkSpeed = currSpeed
	sliding = false
	hrp.CustomPhysicalProperties = origProps
end)

RunService.Heartbeat:Connect(function(dt)
	local camCF = workspace.CurrentCamera.CFrame
	local camLook = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
	local camRight = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit

	local moveDir = hum.MoveDirection
	if moveDir.Magnitude > 0 then
		lastDir = moveDir.Unit
	end

	local hzVel = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)

	if not hum.FloorMaterial then
		-- full air steering based on camera + joystick
		local desiredMove = (camRight * moveDir.X + camLook * moveDir.Z)
		if desiredMove.Magnitude > 0 then
			desiredMove = desiredMove.Unit
			local newVel = hzVel + desiredMove * airControl * dt
			if newVel.Magnitude > currSpeed then
				newVel = newVel.Unit * currSpeed
			end
			hrp.Velocity = Vector3.new(newVel.X, hrp.Velocity.Y, newVel.Z)
		end
	else
		hum.WalkSpeed = currSpeed
	end

	-- sliding / deceleration
	if moveDir.Magnitude == 0 and currSpeed > baseSpeed then
		if not sliding then
			sliding = true
			hrp.CustomPhysicalProperties = slipProps
			hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)
		end
		currSpeed = math.max(baseSpeed, currSpeed - decelRate * dt)
		hum.WalkSpeed = currSpeed
	else
		sliding = false
		hrp.CustomPhysicalProperties = origProps
	end
end)
