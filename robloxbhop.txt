task.spawn(function()
    task.wait(0.5)
    loadstring([[local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

local baseSpeed = 20
local speedCap = 70
local decelRate = 50
local lowFriction = 8
local currSpeed = baseSpeed

local jumpBoostWeights = {[2.3]=30,[2.4]=30,[2.5]=30,[2.6]=5,[2.7]=5}
local weightedJumpBoosts = {}
for boost, weight in pairs(jumpBoostWeights) do
    for i=1,weight do
        table.insert(weightedJumpBoosts,boost)
    end
end

local origProps = hrp.CustomPhysicalProperties or PhysicalProperties.new(0.7,0.3,0.5,1,1)
local slipProps = PhysicalProperties.new(origProps.Density, lowFriction, origProps.Elasticity,100,origProps.ElasticityWeight)

local lastHzSpeed = 0
local lastDir = Vector3.new(0,0,0)
local sliding = false

hum.Jumping:Connect(function()
    local chosenBoost = weightedJumpBoosts[math.random(1,#weightedJumpBoosts)]
    currSpeed = math.min(currSpeed + chosenBoost, speedCap)
    hum.WalkSpeed = currSpeed
    sliding = false
    hrp.CustomPhysicalProperties = origProps
end)

RunService.Heartbeat:Connect(function(dt)
    local moveDir = hum.MoveDirection
    local hzVel = Vector3.new(hrp.Velocity.X,0,hrp.Velocity.Z)

    -- full air control with smooth inertia + random speed nerf
    if not hum.FloorMaterial and moveDir.Magnitude > 0 then
        local wishDir = moveDir.Unit
        local airVel = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)

        -- small chance to decrease speed midair
        if math.random() < 0.15 then
            local nerfAmount = math.random(5,15)
            currSpeed = math.max(baseSpeed, currSpeed - nerfAmount)
        end

        local targetVel = wishDir * math.max(airVel.Magnitude, currSpeed)
        local lerpStrength = 0.35
        local newVel = airVel:Lerp(targetVel, lerpStrength)
        hrp.Velocity = Vector3.new(newVel.X, hrp.Velocity.Y, newVel.Z)
    end

    if moveDir.Magnitude > 0 then
        lastDir = moveDir.Unit
        sliding = false
        hrp.CustomPhysicalProperties = origProps
    end

    local hzSpeedNow = (hrp.Velocity * Vector3.new(1,0,1)).Magnitude
    if hzSpeedNow < lastHzSpeed * 0.5 and lastHzSpeed > baseSpeed * 1.5 then
        currSpeed = baseSpeed
        hum.WalkSpeed = baseSpeed
        sliding = false
        hrp.CustomPhysicalProperties = origProps
    end
    lastHzSpeed = hzSpeedNow

    if moveDir.Magnitude == 0 and currSpeed > baseSpeed then
        if not sliding then
            sliding = true
            hrp.CustomPhysicalProperties = slipProps
            hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)
        end
        currSpeed = math.max(baseSpeed, currSpeed - decelRate * dt)
        hum.WalkSpeed = currSpeed
        local velHz = hrp.Velocity * Vector3.new(1,0,1)
        if velHz.Magnitude > baseSpeed then
            hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)
        else
            sliding = false
            hrp.CustomPhysicalProperties = origProps
            hum.WalkSpeed = baseSpeed
            currSpeed = baseSpeed
        end
    elseif moveDir.Magnitude == 0 then
        currSpeed = baseSpeed
        hum.WalkSpeed = baseSpeed
        sliding = false
        hrp.CustomPhysicalProperties = origProps
    else
        hum.WalkSpeed = currSpeed
    end
end)
]])()
end)

-- second script, unchanged
task.spawn(function()
    task.wait(0.5)
    loadstring([[
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local StarterGui = game:GetService("StarterGui")

        local plr = Players.LocalPlayer
        local cam = workspace.CurrentCamera

        local f, g, h = 15, 10, 70
        local offsetCF = CFrame.new()
        local j, k, l = h, 0, 5
        local hum
        local lastLand = 0

        local anchor
        local camConn
        local expConn

        local function bump(power)
            k = math.clamp(k + power, 0, 2)
        end

        -- destroy everything and disconnect
        local function cleanup()
            if camConn then camConn:Disconnect() camConn = nil end
            if expConn then expConn:Disconnect() expConn = nil end
            if anchor then anchor:Destroy() anchor = nil end
        end

        -- hook current character
        hum = plr.Character:WaitForChild("Humanoid")

        anchor = Instance.new("Part")
        anchor.Anchored = true
        anchor.CanCollide = false
        anchor.Transparency = 1
        anchor.Parent = workspace

        camConn = RunService.RenderStepped:Connect(function(dt)
            local baseCF = cam.CFrame
            offsetCF = offsetCF:Lerp(CFrame.new(), f * dt)

            if k > 0 then
                local shake = Vector3.new(
                    math.random(-100,100)/100 * k,
                    math.random(-100,100)/100 * k,
                    math.random(-100,100)/100 * k
                )
                offsetCF = offsetCF * CFrame.new(shake)
                k = math.max(k - l * dt, 0)
            end

            local t = tick()
            local idle = Vector3.new(math.sin(t*2)*0.05, math.abs(math.cos(t*2))*0.03, 0)
            offsetCF = offsetCF * CFrame.new(idle)

            anchor.CFrame = baseCF * offsetCF
            cam.CFrame = anchor.CFrame

            cam.FieldOfView += (j - cam.FieldOfView) * g * dt
        end)

        expConn = workspace.ChildAdded:Connect(function(obj)
            if obj:IsA("Explosion") and (obj.Position - cam.CFrame.Position).Magnitude < 40 then
                bump(1.2)
            end
        end)

        -- destroy everything on respawn
        plr.CharacterAdded:Connect(function(char)
            cleanup()
        end)

        StarterGui:SetCore("SendNotification", {
            Title = "project_remorse",
            Text = "made by russki_krutoi in roblox",
            Duration = 5
        })
    ]])()
end)
