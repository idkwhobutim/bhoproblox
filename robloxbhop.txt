local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

local baseSpeed = 20
local speedCap = 70
local decelRate = 50
local lowFriction = 8
local currSpeed = baseSpeed

local jumpBoostWeights = {[2.3]=30,[2.4]=30,[2.5]=30,[2.6]=5,[2.7]=5}
local weightedJumpBoosts = {}
for boost, weight in pairs(jumpBoostWeights) do
	for i=1,weight do
		table.insert(weightedJumpBoosts,boost)
	end
end

local origProps = hrp.CustomPhysicalProperties or PhysicalProperties.new(0.7,0.3,0.5,1,1)
local slipProps = PhysicalProperties.new(origProps.Density, lowFriction, origProps.Elasticity,100,origProps.ElasticityWeight)

local lastHzSpeed = 0
local lastDir = Vector3.new(0,0,0)
local sliding = false

-- sounds setup
local walkSound = Instance.new("Sound")
walkSound.SoundId = "rbxassetid://6305502175" -- HL walking footsteps
walkSound.Volume = 0.5
walkSound.Looped = false -- weâ€™ll loop manually
walkSound.Parent = hrp

local jumpSound = Instance.new("Sound")
jumpSound.SoundId = "rbxassetid://15835167421" -- HL jump
jumpSound.Volume = 1
jumpSound.Looped = false
jumpSound.Parent = hrp

-- manually loop walking footsteps
walkSound.Ended:Connect(function()
	if hum.FloorMaterial ~= Enum.Material.Air and (hrp.Velocity * Vector3.new(1,0,1)).Magnitude > baseSpeed then
		walkSound:Play()
	end
end)

hum.Jumping:Connect(function()
	local chosenBoost = weightedJumpBoosts[math.random(1,#weightedJumpBoosts)]
	currSpeed = math.min(currSpeed + chosenBoost, speedCap)
	hum.WalkSpeed = currSpeed
	sliding = false
	hrp.CustomPhysicalProperties = origProps
	-- play jump sound
	jumpSound:Play()
end)

RunService.Heartbeat:Connect(function(dt)
	local moveDir = hum.MoveDirection
	local hzVel = Vector3.new(hrp.Velocity.X,0,hrp.Velocity.Z)
	local onFloor = hum.FloorMaterial ~= Enum.Material.Air

	-- walking footsteps
	if onFloor and hzVel.Magnitude > baseSpeed then
		if not walkSound.IsPlaying then
			walkSound:Play()
		end
	else
		if walkSound.IsPlaying then
			walkSound:Stop()
		end
	end

	-- full air control + random speed nerf
	if not onFloor and moveDir.Magnitude > 0 then
		local wishDir = moveDir.Unit
		local airVel = Vector3.new(hrp.Velocity.X,0,hrp.Velocity.Z)

		if math.random() < 0.15 then
			local nerfAmount = math.random(5,15)
			currSpeed = math.max(baseSpeed, currSpeed - nerfAmount)
		end

		local targetVel = wishDir * math.max(airVel.Magnitude, currSpeed)
		local lerpStrength = 0.35
		local newVel = airVel:Lerp(targetVel, lerpStrength)
		hrp.Velocity = Vector3.new(newVel.X, hrp.Velocity.Y, newVel.Z)
	end

	if moveDir.Magnitude > 0 then
		lastDir = moveDir.Unit
		sliding = false
		hrp.CustomPhysicalProperties = origProps
	end

	local hzSpeedNow = (hrp.Velocity * Vector3.new(1,0,1)).Magnitude
	if hzSpeedNow < lastHzSpeed * 0.5 and lastHzSpeed > baseSpeed * 1.5 then
		currSpeed = baseSpeed
		hum.WalkSpeed = baseSpeed
		sliding = false
		hrp.CustomPhysicalProperties = origProps
	end
	lastHzSpeed = hzSpeedNow

	if moveDir.Magnitude == 0 and currSpeed > baseSpeed then
		if not sliding then
			sliding = true
			hrp.CustomPhysicalProperties = slipProps
			hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)
		end
		currSpeed = math.max(baseSpeed, currSpeed - decelRate * dt)
		hum.WalkSpeed = currSpeed
		local velHz = hrp.Velocity * Vector3.new(1,0,1)
		if velHz.Magnitude > baseSpeed then
			hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)
		else
			sliding = false
			hrp.CustomPhysicalProperties = origProps
			hum.WalkSpeed = baseSpeed
			currSpeed = baseSpeed
		end
	elseif moveDir.Magnitude == 0 then
		currSpeed = baseSpeed
		hum.WalkSpeed = baseSpeed
		sliding = false
		hrp.CustomPhysicalProperties = origProps
	else
		hum.WalkSpeed = currSpeed
	end
end)
