local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- wait for local player
local plr
repeat
    plr = Players.LocalPlayer
    RunService.RenderStepped:Wait()
until plr

-- wait for character
local char = plr.Character
repeat
    char = plr.Character
    RunService.RenderStepped:Wait()
until char

-- wait for humanoid & HRP
local hum = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

local baseSpeed = 16
local speedCap = 100
local decelRate = 50
local lowFriction = 0.1 -- updated friction
local currSpeed = baseSpeed
local airAccel = 50 -- direction only, no speed gain

-- weighted jumpBoosts (mostly 2.3-2.5)
local jumpBoostWeights = {[2.3]=30,[2.4]=30,[2.5]=30,[2.6]=5,[2.7]=5}
local weightedJumpBoosts = {}
for boost, weight in pairs(jumpBoostWeights) do
    for i=1,weight do table.insert(weightedJumpBoosts,boost) end
end

local origProps = hrp.CustomPhysicalProperties or PhysicalProperties.new(0.7,0.3,0.5,1,1)
local slipProps = PhysicalProperties.new(origProps.Density, lowFriction, origProps.Elasticity,100,origProps.ElasticityWeight)

local lastHzSpeed = 0
local lastDir = Vector3.new(0,0,0)
local sliding = false

hum.Jumping:Connect(function()
    local chosenBoost = weightedJumpBoosts[math.random(1,#weightedJumpBoosts)]
    currSpeed = math.min(currSpeed + chosenBoost, speedCap)
    hum.WalkSpeed = currSpeed
    sliding = false
    hrp.CustomPhysicalProperties = origProps
end)

RunService.Heartbeat:Connect(function(delta)
    local moveDir = hum.MoveDirection
    local hzVel = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)

    -- air acceleration (direction only, no speed gain)
    if moveDir.Magnitude > 0 and not hum.FloorMaterial then
        local desiredDir = moveDir.Unit
        local currentDir = hzVel.Magnitude > 0 and hzVel.Unit or desiredDir
        local newDir = (currentDir + desiredDir * airAccel * delta).Unit
        hrp.Velocity = Vector3.new(newDir.X * hzVel.Magnitude, hrp.Velocity.Y, newDir.Z * hzVel.Magnitude)
    end

    if moveDir.Magnitude > 0 then
        lastDir = moveDir.Unit
        sliding = false
        hrp.CustomPhysicalProperties = origProps
    end

    local hzSpeedNow = (hrp.Velocity * Vector3.new(1,0,1)).Magnitude
    if hzSpeedNow < lastHzSpeed * 0.5 and lastHzSpeed > baseSpeed * 1.5 then
        currSpeed = baseSpeed
        hum.WalkSpeed = baseSpeed
        sliding = false
        hrp.CustomPhysicalProperties = origProps
    end
    lastHzSpeed = hzSpeedNow

    if moveDir.Magnitude == 0 and currSpeed > baseSpeed then
        if not sliding then
            sliding = true
            hrp.CustomPhysicalProperties = slipProps
            hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)
        end
        currSpeed = math.max(baseSpeed, currSpeed - decelRate*delta)
        hum.WalkSpeed = currSpeed
        local velHz = hrp.Velocity * Vector3.new(1,0,1)
        if velHz.Magnitude > baseSpeed then
            hrp.Velocity = Vector3.new(lastDir.X*currSpeed, hrp.Velocity.Y, lastDir.Z*currSpeed)
        else
            sliding=false
            hrp.CustomPhysicalProperties=origProps
            hum.WalkSpeed=baseSpeed
            currSpeed=baseSpeed
        end
    elseif moveDir.Magnitude==0 then
        currSpeed=baseSpeed
        hum.WalkSpeed=baseSpeed
        sliding=false
        hrp.CustomPhysicalProperties=origProps
    else
        hum.WalkSpeed=currSpeed
    end
end)
