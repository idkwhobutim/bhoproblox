local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")
local hrp = char:WaitForChild("HumanoidRootPart")

local baseSpeed = 20
local speedCap = 70
local decelRate = 50
local lowFriction = 8
local currSpeed = baseSpeed

local jumpBoostWeights = {[2.3]=30,[2.4]=30,[2.5]=30,[2.6]=5,[2.7]=5}
local weightedJumpBoosts = {}
for boost, weight in pairs(jumpBoostWeights) do
	for i=1,weight do
		table.insert(weightedJumpBoosts,boost)
	end
end

local origProps = hrp.CustomPhysicalProperties or PhysicalProperties.new(0.7,0.3,0.5,1,1)
local slipProps = PhysicalProperties.new(origProps.Density, lowFriction, origProps.Elasticity,100,origProps.ElasticityWeight)

local lastHzSpeed = 0
local lastDir = Vector3.new(0,0,0)
local sliding = false

-- audio setup
local jumpSound = Instance.new("Sound")
jumpSound.SoundId = "rbxassetid://JUMP_AUDIO_ID_HERE"
jumpSound.Volume = 1
jumpSound.Parent = hrp

local walkSounds = {
	"rbxassetid://123493222094354",
	"rbxassetid://125828822010757",
	"rbxassetid://89578014831609",
	"rbxassetid://100496262922882"
}

local climbSounds = {
	"rbxassetid://121596878900064",
	"rbxassetid://108014908693269",
	"rbxassetid://72776261405118",
	"rbxassetid://77055118078641"
}

local currentWalkSound = nil
local currentClimbSound = nil

local function playWalkSound()
	if currentWalkSound then return end
	local sound = Instance.new("Sound")
	sound.SoundId = walkSounds[math.random(1,#walkSounds)]
	sound.Volume = 0.7
	sound.Looped = true
	sound.Parent = hrp
	sound:Play()
	currentWalkSound = sound
end

local function stopWalkSound()
	if currentWalkSound then
		currentWalkSound:Stop()
		currentWalkSound:Destroy()
		currentWalkSound = nil
	end
end

local function playClimbSound()
	if currentClimbSound then return end
	local sound = Instance.new("Sound")
	sound.SoundId = climbSounds[math.random(1,#climbSounds)]
	sound.Volume = 0.7
	sound.Looped = true
	sound.Parent = hrp
	sound:Play()
	currentClimbSound = sound
end

local function stopClimbSound()
	if currentClimbSound then
		currentClimbSound:Stop()
		currentClimbSound:Destroy()
		currentClimbSound = nil
	end
end

hum.Jumping:Connect(function()
	local chosenBoost = weightedJumpBoosts[math.random(1,#weightedJumpBoosts)]
	currSpeed = math.min(currSpeed + chosenBoost, speedCap)
	hum.WalkSpeed = currSpeed
	sliding = false
	hrp.CustomPhysicalProperties = origProps

	jumpSound:Play()
end)

RunService.Heartbeat:Connect(function(dt)
	local moveDir = hum.MoveDirection
	local hzVel = Vector3.new(hrp.Velocity.X,0,hrp.Velocity.Z)

	-- full air control + random speed nerf  
	if not hum.FloorMaterial and moveDir.Magnitude > 0 and hum:GetState() ~= Enum.HumanoidStateType.Climbing then  
		local wishDir = moveDir.Unit  
		local airVel = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)  

		if math.random() < 0.15 then  
			local nerfAmount = math.random(5,15)  
			currSpeed = math.max(baseSpeed, currSpeed - nerfAmount)  
		end  

		local targetVel = wishDir * math.max(airVel.Magnitude, currSpeed)    
		local lerpStrength = 0.35  
		local newVel = airVel:Lerp(targetVel, lerpStrength)  
		hrp.Velocity = Vector3.new(newVel.X, hrp.Velocity.Y, newVel.Z)
	end  

	-- walking sound logic
	if moveDir.Magnitude > 0 and hum.FloorMaterial then
		playWalkSound()
	else
		stopWalkSound()
	end

	-- climbing sound logic
	if hum:GetState() == Enum.HumanoidStateType.Climbing then
		playClimbSound()
	else
		stopClimbSound()
	end

	if moveDir.Magnitude > 0 then  
		lastDir = moveDir.Unit  
		sliding = false  
		hrp.CustomPhysicalProperties = origProps  
	end  

	local hzSpeedNow = (hrp.Velocity * Vector3.new(1,0,1)).Magnitude  
	if hzSpeedNow < lastHzSpeed * 0.5 and lastHzSpeed > baseSpeed * 1.5 then  
		currSpeed = baseSpeed  
		hum.WalkSpeed = baseSpeed  
		sliding = false  
		hrp.CustomPhysicalProperties = origProps  
	end  
	lastHzSpeed = hzSpeedNow  

	if moveDir.Magnitude == 0 and currSpeed > baseSpeed then  
		if not sliding then  
			sliding = true  
			hrp.CustomPhysicalProperties = slipProps  
			hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)  
		end  
		currSpeed = math.max(baseSpeed, currSpeed - decelRate * dt)  
		hum.WalkSpeed = currSpeed  
		local velHz = hrp.Velocity * Vector3.new(1,0,1)  
		if velHz.Magnitude > baseSpeed then  
			hrp.Velocity = Vector3.new(lastDir.X * currSpeed, hrp.Velocity.Y, lastDir.Z * currSpeed)  
		else  
			sliding = false  
			hrp.CustomPhysicalProperties = origProps  
			hum.WalkSpeed = baseSpeed  
			currSpeed = baseSpeed  
		end  
	elseif moveDir.Magnitude == 0 then  
		currSpeed = baseSpeed  
		hum.WalkSpeed = baseSpeed  
		sliding = false  
		hrp.CustomPhysicalProperties = origProps  
		stopWalkSound()
		stopClimbSound()
	else  
		hum.WalkSpeed = currSpeed  
	end
end)
