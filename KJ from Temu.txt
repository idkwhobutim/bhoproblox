repeat task.wait() until game:IsLoaded()

print("Loaded")

local players = game:GetService("Players")
local player = players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass('Humanoid')
local humanoidrootpart = character:FindFirstChild('HumanoidRootPart') or character.PrimaryPart
local rootjoint = humanoidrootpart:WaitForChild'RootJoint'
local rootc0 = rootjoint.C0

player.CharacterAdded:Connect(function()
	character = player.Character
	humanoid = character:FindFirstChildOfClass('Humanoid')
	humanoidrootpart = character:FindFirstChild('HumanoidRootPart') or character.PrimaryPart
	rootjoint = humanoidrootpart:WaitForChild'RootJoint'
	rootc0 = rootjoint.C0
end)

local active_move = nil

----------------------------------------------------------
-- STOIC BOMB (unchanged)
----------------------------------------------------------
local function stoic_bomb()
	if active_move then return end
	active_move = "Stoic Bomb"

	local flute_track
	local hold_track
	local freezeVelo = true

	task.spawn(function()
		task.wait(0.2)
		local flute_anim = Instance.new("Animation")
		flute_anim.AnimationId = "rbxassetid://52154760"
		local hold_anim = Instance.new("Animation")
		hold_anim.AnimationId = "rbxassetid://48138189"

		flute_track = humanoid:LoadAnimation(flute_anim)
		hold_track = humanoid:LoadAnimation(hold_anim)
		flute_track:Play(); hold_track:Play();

		task.wait(1)
		flute_track:AdjustSpeed(0); flute_track:AdjustSpeed(0);
	end)

	task.spawn(function()
		task.wait(0.2)
		local TweenService = game:GetService("TweenService")
		local initial_position = humanoidrootpart.CFrame

		local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
		local tween = TweenService:Create(humanoidrootpart, tweenInfo, {CFrame = initial_position + Vector3.new(0, 140, 0)})
		tween:Play(); tween.Completed:Wait()

		tweenInfo = TweenInfo.new(0.75, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		tween = TweenService:Create(humanoidrootpart, tweenInfo, {CFrame = initial_position + Vector3.new(0, 150, 0)})
		tween:Play(); tween.Completed:Wait()

		tweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		tween = TweenService:Create(humanoidrootpart, tweenInfo, {CFrame = initial_position + Vector3.new(0, 8, 0)})
		tween:Play(); tween.Completed:Wait()

		tweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		tween = TweenService:Create(humanoidrootpart, tweenInfo, {CFrame = initial_position + Vector3.new(0, 5, 0)})
		tween:Play(); tween.Completed:Wait()

		task.wait(0.75)
		flute_track:Stop(); hold_track:Stop();
		freezeVelo = false
	end)

	task.spawn(function()
		local TweenService = game:GetService("TweenService")
		local tweenInfo = TweenInfo.new(0.18, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
		local tween = TweenService:Create(humanoidrootpart, tweenInfo, {CFrame = humanoidrootpart.CFrame * CFrame.Angles(math.rad(-25), 0, 0)})
		tween:Play(); tween.Completed:Wait()

		task.wait(0.21)
		humanoidrootpart.CFrame = humanoidrootpart.CFrame * CFrame.Angles(math.rad(160), 0, 0)
		tweenInfo = TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		tween = TweenService:Create(humanoidrootpart, tweenInfo, {CFrame = humanoidrootpart.CFrame * CFrame.Angles(math.rad(340), 0, 0)})
		tween:Play(); tween.Completed:Wait()
	end)

	task.spawn(function()
		for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do track:Stop() end
		local connection; connection = game:GetService("RunService").RenderStepped:Connect(function()
			if not freezeVelo then connection:Disconnect(); return end
			humanoidrootpart.Velocity = Vector3.zero
		end)

		local org_WalkSpeed = humanoid.WalkSpeed
		local org_AutoRotate = humanoid.AutoRotate
		local org_JumpPower = humanoid.JumpPower
		humanoid.WalkSpeed = 0
		humanoid.AutoRotate = false
		humanoid.JumpPower = 0
		task.wait(3)
		humanoid.WalkSpeed = org_WalkSpeed
		humanoid.AutoRotate = org_AutoRotate
		humanoid.JumpPower = org_JumpPower
		humanoid.HipHeight = 0
		active_move = nil
	end)
end

----------------------------------------------------------
-- 20-20-20 DROPKICK (unchanged)
----------------------------------------------------------
local function drop_kick()
	if active_move then return end
	active_move = "20-20-20 Dropkick"

	local nearestPlayer = nil
	local nearestDistance = math.huge

	if not humanoidrootpart then return end
	for _, plr in ipairs(players:GetPlayers()) do
		if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
			local targetRootPart = plr.Character.HumanoidRootPart
			local distance = (humanoidrootpart.Position - targetRootPart.Position).Magnitude
			if distance < nearestDistance then
				nearestDistance = distance
				nearestPlayer = plr
			end
		end
	end

	if not nearestPlayer then return end
	local target = nearestPlayer.Character
	if not target or not target:FindFirstChild("Humanoid") then return end

	local TRootPart = target:FindFirstChild("HumanoidRootPart")
	humanoid:MoveTo(TRootPart.Position)
	humanoid.WalkSpeed = 85
	local startTime = tick()
	local timeoutDuration = 5

	repeat
		humanoid.WalkSpeed = 85
		humanoid:MoveTo(TRootPart.Position)
		task.wait()
		if tick() - startTime > timeoutDuration then
			humanoid:MoveTo(humanoidrootpart.Position)
			active_move = nil
			return
		end
	until (humanoidrootpart.Position - TRootPart.Position).Magnitude < 5

	local anim = Instance.new("Animation")
	anim.AnimationId = "rbxassetid://180436148"
	for _, Anim in pairs(humanoid:GetPlayingAnimationTracks()) do Anim:Stop() end
	local track = humanoid:LoadAnimation(anim)
	track:Play()
	track.TimePosition = 0.1
	track:AdjustSpeed(0)
	anim:Destroy()
	humanoid:MoveTo(humanoidrootpart.Position)

	local connection = game:GetService('RunService').RenderStepped:Connect(function()
		if not humanoidrootpart then return end
		humanoidrootpart.CFrame = CFrame.new(TRootPart.Position + Vector3.new(0, 1.75, 0) + (TRootPart.CFrame.LookVector * 2.4))
		local lookAtCFrame = CFrame.lookAt(humanoidrootpart.Position, TRootPart.Position)
		humanoidrootpart.CFrame = lookAtCFrame * CFrame.Angles(math.rad(115), math.rad(90), 0)
		humanoidrootpart.Velocity = Vector3.new(0, 0, 0)
	end)

	task.wait(2)
	connection:Disconnect()
	for _, Anim in pairs(humanoid:GetPlayingAnimationTracks()) do Anim:Stop() end
	humanoidrootpart.CFrame = CFrame.new(humanoidrootpart.Position, TRootPart.Position or nil)
	humanoid.Sit = true
	task.wait(0.5)
	humanoid.Sit = false
	humanoid.WalkSpeed = 16
	humanoid.AutoRotate = true
	humanoid.JumpPower = 50
	active_move = nil
end

----------------------------------------------------------
-- HALF DESCENT (fixed & improved)
----------------------------------------------------------
local function half_descent()
	if active_move then return end
	active_move = "Half Descent"

	local freezeVelo = true
	local TweenService = game:GetService("TweenService")
	local initial_position = humanoidrootpart.CFrame

	-- store originals for restoration
	local orig_rootc0 = rootjoint and rootjoint.C0 or nil
	local rightShoulder = character:FindFirstChild("Right Shoulder", true)
	local leftShoulder = character:FindFirstChild("Left Shoulder", true)
	local neck = character:FindFirstChild("Neck", true)

	local orig_right_C0 = rightShoulder and rightShoulder.C0 or nil
	local orig_left_C0 = leftShoulder and leftShoulder.C0 or nil
	local orig_neck_C0 = neck and neck.C0 or nil

	-- rise and pitch forward (pitch is negative to face nose->ground)
	task.spawn(function()
		local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(humanoidrootpart, tweenInfo, {CFrame = initial_position + Vector3.new(0, 120, 0)})
		tween:Play(); tween.Completed:Wait()

		-- pitch forward ~85 degrees (use negative angle so nose faces ground)
		local tiltTween = TweenService:Create(humanoidrootpart, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			CFrame = humanoidrootpart.CFrame * CFrame.Angles(math.rad(-85), 0, 0)
		})
		tiltTween:Play(); tiltTween.Completed:Wait()
	end)

	-- movement enable/disable + speed buff window
	task.spawn(function()
		local org_WalkSpeed = humanoid.WalkSpeed
		local org_AutoRotate = humanoid.AutoRotate
		local org_JumpPower = humanoid.JumpPower

		-- copy stoic bomb style disabling
		humanoid.AutoRotate = false
		humanoid.JumpPower = 0

		task.wait(0.7) -- let tilt finish

		-- allow player to move for 10s (70 speed)
		humanoid.WalkSpeed = 70
		freezeVelo = false

		task.wait(10) -- player moves & lines up hit

		-- freeze movement again before descent
		humanoid.WalkSpeed = 0
		freezeVelo = true

		-- restore some things later after descent (done in descent thread)
	end)

	-- arm + torso/other-body tilt pose
	task.spawn(function()
		-- try to tilt rootjoint (torso) to the left a bit
		if rootjoint and orig_rootc0 then
			-- tilt torso roll left ~20 degrees visually
			rootjoint.C0 = orig_rootc0 * CFrame.Angles(0, 0, math.rad(-18))
		end

		-- right arm: down & forward (ready to punch)
		if rightShoulder and orig_right_C0 then
			-- position: slightly lower and forward, rotated forward so hand points downwards toward target
			rightShoulder.C0 = orig_right_C0 * CFrame.new(0, -0.2, -0.35) * CFrame.Angles(math.rad(-65), math.rad(10), math.rad(-20))
		end

		-- left arm: adjust to look natural when torso tilts
		if leftShoulder and orig_left_C0 then
			leftShoulder.C0 = orig_left_C0 * CFrame.new(0, -0.05, 0) * CFrame.Angles(math.rad(10), math.rad(-8), math.rad(-12))
		end

		-- neck tilt a little to sell the pose
		if neck and orig_neck_C0 then
			neck.C0 = orig_neck_C0 * CFrame.Angles(math.rad(-10), 0, math.rad(-8))
		end

		-- hold pose for the charge + a little extra so timing matches other threads
		task.wait(10.5)

		-- restore joints after pose period (final restore also happens after descent to be safe)
		if rightShoulder and orig_right_C0 then rightShoulder.C0 = orig_right_C0 end
		if leftShoulder and orig_left_C0 then leftShoulder.C0 = orig_left_C0 end
		if neck and orig_neck_C0 then neck.C0 = orig_neck_C0 end
		if rootjoint and orig_rootc0 then rootjoint.C0 = orig_rootc0 end
	end)

	-- hold in air (prevent falling) while freezeVelo true, then descend to tracked pos
	task.spawn(function()
		local connection
		connection = game:GetService("RunService").RenderStepped:Connect(function()
			if not freezeVelo then return end
			if humanoidrootpart then
				humanoidrootpart.Velocity = Vector3.zero
			end
		end)

		-- wait full charge window + safety
		task.wait(11)

		-- compute tracked final position based on current humanoid position (so it tracks where you moved)
		local targetPos = humanoidrootpart and humanoidrootpart.Position or (initial_position and initial_position.Position) or Vector3.new(0,0,0)
		-- drop to a point slightly above ground at current horizontal location
		local downTargetCFrame = CFrame.new(targetPos + Vector3.new(0, 5, 0))

		local downTween = TweenService:Create(humanoidrootpart, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
			CFrame = downTargetCFrame
		})
		downTween:Play(); downTween.Completed:Wait()

		connection:Disconnect()

		-- restore movement settings
		humanoid.WalkSpeed = 16
		humanoid.AutoRotate = true
		humanoid.JumpPower = 50
		humanoid.HipHeight = 0

		freezeVelo = false
		active_move = nil
	end)
end

----------------------------------------------------------
-- TOOLS (including new Half Descent)
----------------------------------------------------------
local stoic_bomb_skill = Instance.new("Tool")
stoic_bomb_skill.Name = "Stoic Bomb"
stoic_bomb_skill.RequiresHandle = false
stoic_bomb_skill.Parent = player.Backpack
stoic_bomb_skill.Equipped:Connect(function()
	stoic_bomb()
	task.wait()
	stoic_bomb_skill.Parent = player.Backpack
end)

local drop_kick_skill = Instance.new("Tool")
drop_kick_skill.Name = "20-20-20 Dropkick"
drop_kick_skill.RequiresHandle = false
drop_kick_skill.Parent = player.Backpack
drop_kick_skill.Equipped:Connect(function()
	task.spawn(drop_kick)
	task.wait()
	drop_kick_skill.Parent = player.Backpack
end)

local half_descent_skill = Instance.new("Tool")
half_descent_skill.Name = "Half Descent"
half_descent_skill.RequiresHandle = false
half_descent_skill.Parent = player.Backpack
half_descent_skill.Equipped:Connect(function()
	half_descent()
	task.wait()
	half_descent_skill.Parent = player.Backpack
end)
